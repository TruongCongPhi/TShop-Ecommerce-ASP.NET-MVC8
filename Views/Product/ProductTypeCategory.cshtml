@using TShop.Helpers
@model List<TShop.ViewModels.ProductTypeCategoryVM>
@{
    ViewData["Title"] = Model.FirstOrDefault().TypeCategory.CategoryName;
    string currentCat = Context.Request.Query["cat"].ToString();
    int totalCount = ViewBag.TotalCount;
    int pageSize = Utilities.PAGE_SIZE;
}

<div class="block-page mt-5">
    <div class="row col-12">
        <div class="breadcrumb__option">
            <a href="/">Trang chủ</a>
            <span>@Model.FirstOrDefault().TypeCategory.CategoryName</span>
        </div>
    </div>
    <div class="">
        <ul class="category__link d-flex" style="cursor: pointer;">
            <li class="flex-fill @(string.IsNullOrEmpty(currentCat) ? "active" : "")">
                <a href="@Url.Action("ProductTypeCategory", "Product", new { typecategory = @Model.FirstOrDefault().TypeCategory.Alias, cat = "" })">
                <span aria-label="Category">Tất cả</span>
                </a>
            </li>
            <li class="flex-fill @(currentCat == "nu" ? "active" : "")">
                <a href="@Url.Action("ProductTypeCategory", "Product", new { typecategory = @Model.FirstOrDefault().TypeCategory.Alias, cat = "nu" })">
                    <span aria-label="Category">Nữ</span>
                </a>
            </li>
            <li class="flex-fill @(currentCat == "nam" ? "active" : "")">
                <a href="@Url.Action("ProductTypeCategory", "Product", new { typecategory = @Model.FirstOrDefault().TypeCategory.Alias, cat = "nam" })">
                    <span aria-label="Category">Nam</span>
                </a>
            </li>
            <li class="flex-fill @(currentCat == "girl" ? "active" : "")">
                <a href="@Url.Action("ProductTypeCategory", "Product", new { typecategory = @Model.FirstOrDefault().TypeCategory.Alias, cat = "girl" })">
                    <span aria-label="Category">Bé gái</span>
                </a>
            </li>
            <li class="flex-fill @(currentCat == "boy" ? "active" : "")">
                <a href="@Url.Action("ProductTypeCategory", "Product", new { typecategory = @Model.FirstOrDefault().TypeCategory.Alias, cat = "boy" })">
                    <span aria-label="Category">Bé trai</span>
                </a>
            </li>
        </ul>
    </div>

    <div class="d-flex mb-3 align-items-center justify-content-between">
        <div class="d-flex">
            <div class="fs-5 me-3">Bộ lọc: </div>
            <div class="dropdown me-3">
                <button type="button" class="btn bg-white  border dropdown-toggle" data-bs-toggle="dropdown" data-bs-auto-close="outside" aria-expanded="false" data-bs-offset="0,5">
                    Khoảng giá
                </button>
                <ul class="dropdown-menu my-0">
                    <li class="" style="width:250px;padding: 0px 5px 10px 5px;">@await Component.InvokeAsync("PriceRanges", Model.FirstOrDefault().TypeCategory.CategoryId)</li>
                </ul>
            </div>
            <div class="dropdown me-1">
                <button type="button" class="btn bg-white  border dropdown-toggle" data-bs-toggle="dropdown" data-bs-auto-close="outside" aria-expanded="false" data-bs-offset="0,5">
                    Kích cỡ
                </button>
                <ul class="dropdown-menu py-0 ps-2" style="min-width:11rem; max-width:30rem;">
                    @await Component.InvokeAsync("Sizes", Model.FirstOrDefault().TypeCategory.CategoryId)
                </ul>
            </div>
        </div>

                <div class="shop__product__option__right">
                    <p>Sắp xếp theo:</p>
                    <select class="bg-0">
                        <option value="">Chọn</option>
                        <option value="new">Mới nhất</option>
                        <option value="asc">Giá từ thấp đến cao</option>
                        <option value="desc">Giá từ cao đến thấp</option>
                    </select>
                </div>
 
    </div>

    <div class="grid-container-4 grid-container">
        @foreach (var item in Model)
        {
            @await Html.PartialAsync("ProductItem", item.ProductTypeCats)
        }
    </div>
    @if ( pageSize < totalCount)
    {
        <div class="text-center">
            <button id="load-more" class="mt-3 btn__add"
                    data-pagesize="@pageSize"
                    data-pagetotal="@totalCount">
                Xem thêm
            </button>
        </div>
        <div class="mt-2 mb-5 text-center"><span id="show-count">Hiển thị @pageSize trên tổng số @totalCount sản phẩm</span> </div>
    }else{
        <div class="mt-2 mb-5 text-center"><span id="show-count">Hiển thị @totalCount trên tổng số @totalCount sản phẩm</span> </div>
    }
</div>

  @section Scripts {
      <script>
          $(document).ready(function () {
              var sortOption = '';
              var sizeIds = [];
              var colorIds = [];
              var priceMin = $(".range-min").val();
              var priceMax = $(".range-max").val();
              var page = 1;


              $('.shop__product__option__right select').change(function () {
                  sortOption = $(this).val();
                  applyFilters();
              });

              $(".shop__sidebar__size .size__show").click(function () {
                  var sizeSelect = parseInt($(this).data("sizeid"));

                  $(this).toggleClass('selected');

                  var index = sizeIds.indexOf(sizeSelect);
                  if (index === -1) {
                      sizeIds.push(sizeSelect);
                  } else {
                      sizeIds.splice(index, 1);
                  }
                  applyFilters();
              });

              // $(".shop__sidebar__color .color__form").click(function () {
              //     var colorId = $(this).data("colorid");

              //     $(this).toggleClass('selected');

              //     var index = colorIds.indexOf(colorId);
              //     if (index === -1) {
              //         colorIds.push(colorId);
              //     } else {
              //         colorIds.splice(index, 1);
              //     }
              //     applyFilters();
              // });
              $('.range-min, .range-max').on('change', function () {
                  priceMin = $('.range-min').val();
                  priceMax = $('.range-max').val();
                  applyFilters();

              });
              $("#load-more").click(function () {
                  console.log(page + 1);
                  loadProducts(page + 1, false);
              });

              function applyFilters() {
                  page = 1;
                  loadProducts(page, true);
              }
              var currentCat = "@currentCat" ;
              var alias = "";
              if (currentCat == "") {
                  alias = "@Model.FirstOrDefault().TypeCategory.Alias";
              }

              function loadProducts(pageNumber, isLoad) {

                  console.log("page"+ pageNumber + ", sắp xếp: " + sortOption + ", size: " + sizeIds + ", màu: " + colorIds + ", giá: " + priceMin + "-" + priceMax);
                  var categoryId = @Model.FirstOrDefault().TypeCategory.CategoryId;

                  $.ajax({
                      type: "POST",
                    url: '@Url.Action("LoadMoreProducts", "Product")',

                      data: {
                          page: pageNumber,
                          alias: alias,
                          categoryId: categoryId,
                          sortOption: sortOption,
                          sizeIds: sizeIds.map(Number),
                          colorIds: colorIds,
                          priceMin: priceMin,
                          priceMax: priceMax
                      },
                      success: function (response) {
                          if (isLoad) {
                              $(".grid-container").html(response);
                          } else {
                              $(".grid-container").append(response);
                          }
                          page = pageNumber;

                          $.when(
                              $.getScript('/tshop/js/product.js'),
                          );
                          $.ajax({
                              type: "POST",
                            url: '@Url.Action("LoadMoreProductsCount", "Product")',
                              data: {
                                  page: pageNumber,
                                  alias: alias,
                                  categoryId: categoryId,
                                  sortOption: sortOption,
                                  sizeIds: sizeIds.map(Number),
                                  colorIds: colorIds,
                                  priceMin: priceMin,
                                  priceMax: priceMax
                              },
                              success: function (response) {
                                
                                      $("#show-count").html("Hiển thị " + response.countNow + " trên tổng số " + response.countAll + " sản phẩm");
                                  if (response.countAll == response.countNow) {
                                      $("#load-more").css('visibility', 'hidden');
                                  }else{
                                      $("#load-more").css('visibility', 'visible');
                                  }
                              },
                              error: function (xhr, status, error) {
                                  console.error("Xảy ra lỗi: " + error);
                              }
                          });
                      },
                      error: function (xhr, status, error) {
                          console.error("Xảy ra lỗi: " + error);
                      }
                  });
                
              }

          });
      </script>
  }